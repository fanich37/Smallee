'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		define([], factory(root));
	} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
		module.exports = factory(root);
	} else {
		root.Smallee = factory(root);
	}
})(typeof global !== 'undefined' ? global : window || undefined.window || undefined.global, function (root) {
	'use strict';

	window.Smallee = Smallee || {};

	var defaultClasses = {
		smallee: 'smallee',
		inner: 'smallee-inner',
		slide: 'smallee-slide',
		prev: 'smallee-prev',
		next: 'smallee-next',
		prevDisabled: 'smallee-prev_disabled',
		nextDisabled: 'smallee-next_disabled'
	};

	function Smallee(object) {
		var _this2 = this;

		if (object.selector.charAt(0) === '#') {
			this.selector = document.getElementById(object.selector.substr(1));
		} else if (object.selector.charAt(0) === '.') {
			this.selector = document.getElementsByClassName(object.selector.substr(1))[0];
		} else {
			throw new Error('It seems that you forgot css-selectors :-)');
		}
		this.slides = Array.prototype.slice.call(this.selector.children);
		this.numberOfSlides = this.slides.length;

		var defaultSettings = {
			controls: false,
			slidesToShow: 1,
			slidesToScroll: 1,
			effect: 'default', // also 'fade' is available
			swipeable: false,
			transition: 'ease-in-out .3s',
			threshold: 100
		};

		if (arguments[0] && _typeof(arguments[0]) === 'object') {
			this.settings = setUserSettings(defaultSettings, arguments[0]);
		}

		['nextSlide', 'prevSlide', 'moveSlides', 'mouseDown', 'mouseUp', 'mouseMove', 'mouseLeave', 'transitionEnd', 'restoreOpacity', 'preventDragStart'].forEach(function (method) {
			_this2[method] = _this2[method].bind(_this2);
		});

		this.init();
	}

	function prevDefAndStopProp(event) {
		event.preventDefault();
		event.stopPropagation();
	}

	function setUserSettings(def, args) {
		for (var propertyName in args) {
			if (args.hasOwnProperty(propertyName)) {
				def[propertyName] = args[propertyName];
			}
		}
		return def;
	}

	Smallee.prototype.init = function () {
		var _this3 = this;

		var fragment = document.createDocumentFragment();

		this.selector.classList.add(defaultClasses.smallee);

		this.inner = document.createElement('DIV');
		this.inner.classList.add(defaultClasses.inner);
		this.slides.forEach(function (item, i) {
			item.setAttribute('data-index', i);
			_this3.inner.appendChild(item);
		});

		fragment.appendChild(this.inner);

		this.selector.appendChild(fragment);
		this.setStylesToTheElements();
		this.stepRange = this.selector.clientWidth / this.settings.slidesToShow * this.settings.slidesToScroll;
		this.scrollLimit = -((this.numberOfSlides - this.settings.slidesToShow) * (this.stepRange / this.settings.slidesToScroll));
		this.sliderCoords = {
			start: null,
			wasMovedOn: null
		};

		if (this.settings.controls) {
			this.setNavigation();
		}
		if (this.settings.swipeable) {
			this.isDown = false;
			this.initSwipeEvents();
		}
		if (this.settings.effect === 'fade') {
			this.transitionEnd();
		}
	};

	Smallee.prototype.setStylesToTheElements = function () {
		var _this4 = this;

		var sliderWidth = this.selector.clientWidth;

		this.selector.style.overflow = 'hidden';
		this.selector.style.position = 'relative';

		this.inner.style.width = sliderWidth * this.numberOfSlides / this.settings.slidesToShow + 'px';
		this.inner.style.transition = this.settings.transition;

		this.slides.forEach(function (item) {
			item.style.float = 'left';
			item.style.width = sliderWidth / _this4.settings.slidesToShow + 'px';
		});
	};

	Smallee.prototype.setControlsState = function () {
		if (this.defineSmalleeWasTranslatedOn() === this.scrollLimit) {
			this.next.classList.add(defaultClasses.nextDisabled);
		} else {
			this.next.classList.remove(defaultClasses.nextDisabled);
		}

		if (this.defineSmalleeWasTranslatedOn() === 0) {
			this.prev.classList.add(defaultClasses.prevDisabled);
		} else {
			this.prev.classList.remove(defaultClasses.prevDisabled);
		}
	};

	Smallee.prototype.setNavigation = function () {
		this.prev = document.createElement('BUTTON');
		this.prev.type = 'button';
		this.prev.classList.add(defaultClasses.prev);

		this.next = document.createElement('BUTTON');
		this.next.type = 'button';
		this.next.classList.add(defaultClasses.next);

		this.selector.appendChild(this.prev);
		this.selector.appendChild(this.next);

		this.initClickEvents();
		this.setControlsState();
	};

	Smallee.prototype.defineSmalleeWasTranslatedOn = function () {
		var translate = this.inner.style.transform;
		return translate ? Number(translate.slice(translate.indexOf('(') + 1, translate.indexOf('p'))) : 0;
	};

	Smallee.prototype.nextSlide = function (event) {
		var limit = this.scrollLimit;
		var nextStep = this.sliderCoords.wasMovedOn - this.stepRange >= limit ? this.sliderCoords.wasMovedOn - this.stepRange : limit;

		switch (this.settings.effect) {
			case 'fade':
				var _this = this;
				this.inner.style.opacity = 0;
				var timer1 = setTimeout(function () {
					_this.inner.style.transform = 'translate3d(' + nextStep + 'px, 0, 0)';
					clearInterval(timer1);
				}, 300);
				var timer2 = setTimeout(function () {
					_this.inner.style.opacity = 1;
					_this.setControlsState();
					clearInterval(timer2);
				}, 600);
				break;
			default:
				this.inner.style.transform = 'translate3d(' + nextStep + 'px, 0, 0)';
				this.setControlsState();
		}
	};

	Smallee.prototype.transitionEnd = function () {
		// this.inner.addEventListener('transitionend', this.restoreOpacity, false);
	};

	Smallee.prototype.restoreOpacity = function (event) {
		// this.inner.style.opacity = 1;
	};

	Smallee.prototype.prevSlide = function (event) {
		var prevStep = this.sliderCoords.wasMovedOn + this.stepRange > 0 ? 0 : this.sliderCoords.wasMovedOn + this.stepRange;

		switch (this.settings.effect) {
			case 'fade':
				var _this = this;
				this.inner.style.opacity = 0;
				var timer1 = setTimeout(function () {
					_this.inner.style.transform = 'translate3d(' + prevStep + 'px, 0, 0)';
					clearInterval(timer1);
				}, 300);
				var timer2 = setTimeout(function () {
					_this.inner.style.opacity = 1;
					_this.setControlsState();
					clearInterval(timer2);
				}, 600);
				break;
			default:
				this.inner.style.transform = 'translate3d(' + prevStep + 'px, 0, 0)';
		}
		this.setControlsState();
	};

	Smallee.prototype.clearTransition = function () {
		this.inner.style.transition = '0s';
	};

	Smallee.prototype.restoreTransition = function () {
		this.inner.style.transition = this.settings.transition;
	};

	Smallee.prototype.moveSlides = function () {
		this.sliderCoords.wasMovedOn = this.defineSmalleeWasTranslatedOn();
		if (event.target.closest('.' + defaultClasses.next)) {
			this.nextSlide();
		}
		if (event.target.closest('.' + defaultClasses.prev)) {
			this.prevSlide();
		}
	};

	Smallee.prototype.initClickEvents = function (event) {
		this.selector.addEventListener('click', this.moveSlides);
	};

	Smallee.prototype.mouseDown = function (event) {
		this.isDown = true;
		this.sliderCoords.start = event.clientX;
		this.sliderCoords.wasMovedOn = this.defineSmalleeWasTranslatedOn();
		this.clearTransition();
	};

	Smallee.prototype.mouseUp = function () {
		this.isDown = false;
		this.restoreTransition();
		if (event.clientX - this.sliderCoords.start < -this.settings.threshold) {
			this.nextSlide();
			return;
		}
		if (event.clientX - this.sliderCoords.start > this.settings.threshold) {
			this.prevSlide();
			return;
		}
		this.inner.style.transform = 'translate3d(' + this.sliderCoords.wasMovedOn + 'px, 0, 0)';
	};

	Smallee.prototype.mouseMove = function (event) {
		if (this.isDown) {
			this.inner.style.transform = 'translate3d(' + (this.sliderCoords.wasMovedOn + event.clientX - this.sliderCoords.start) + 'px, 0, 0)';
		}
	};

	Smallee.prototype.mouseLeave = function () {
		if (this.isDown) {
			this.isDown = false;
			this.restoreTransition();
			if (event.clientX - this.sliderCoords.start < -this.settings.threshold) {
				this.nextSlide();
				return;
			}
			if (event.clientX - this.sliderCoords.start > this.settings.threshold) {
				this.prevSlide();
				return;
			}
			this.inner.style.transform = 'translate3d(' + this.sliderCoords.wasMovedOn + 'px, 0, 0)';
		}
	};

	Smallee.prototype.preventDragStart = function (event) {
		prevDefAndStopProp(event);
	};

	Smallee.prototype.initSwipeEvents = function () {
		this.inner.addEventListener('mousedown', this.mouseDown);
		this.inner.addEventListener('mouseup', this.mouseUp);
		this.inner.addEventListener('mousemove', this.mouseMove);
		this.inner.addEventListener('mouseleave', this.mouseLeave);
		this.inner.addEventListener('dragstart', this.preventDragStart);
	};

	return Smallee;
});